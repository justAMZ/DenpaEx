package updates;

import haxe.zip.Entry;

class ZipHandler 
{
    public static function saveUncompressed(zip_Path:String, save_path:String):Void {
        //Step 1: We use File.read to get a FileInput, which we then read using the zip-reader to create a list of compressed files
        var zipReader = new haxe.zip.Reader(File.read(zip_Path));
        var file_list:haxe.ds.List<Entry> = zipReader.read();

        //Step 2: Make sure our target folder exists!!!
        if(!save_path.endsWith('/')) save_path += '/';
        if(!FileSystem.exists('${save_path}')) FileSystem.createDirectory('${save_path}');

        //Step 3: We loop through the list of compressed files and uncompress them, then save them to their designated location
        for(file in file_list) {
            trace(file.fileName);
            if(file.fileName.endsWith('/')) { FileSystem.createDirectory(save_path + file.fileName); continue; } //Step 3.5: If its a directory create it and skip decompression!!!
            final fileData:Null<haxe.io.Bytes> = uncompressFile(file);

            if(file.fileName == 'DenpaEngine.exe') file.fileName = 'App';
            File.saveBytes(save_path + file.fileName, fileData);
        }
    }

    /**
     * For readability altered version of original haxe.zip.unzip function, takes from reader produced entry and uncompresses it.
     * @param file The file to uncompress, can be generated by creating a new entry list using `new Reader(File.read(filePath)).read()` and then looping through the list.
     * @return `Null<haxe.io.Bytes>` -> The uncompressed bytes of the parameter file.
     */
    public static function uncompressFile(file:Entry):Null<haxe.io.Bytes> {
        if(!file.compressed)
			return file.data; //File is already uncompressed

		var c = new haxe.zip.Uncompress(-15);
		var s = haxe.io.Bytes.alloc(file.fileSize);
		var r = c.execute(file.data,0,s,0);
		c.close();
		if( !r.done || r.read != file.data.length || r.write != file.fileSize )
			throw 'Invalid compressed data for ${file.fileName}';
		file.compressed = false;
		file.dataSize = file.fileSize;
		file.data = s;
        return file.data;
    }
}
